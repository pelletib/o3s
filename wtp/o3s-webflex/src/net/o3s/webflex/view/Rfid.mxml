<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2011 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:components="net.o3s.webflex.components.*"
         xmlns:util="util.*"
         width="100%" height="100%" creationComplete="init()">

   <mx:Script>
      <![CDATA[
         import mx.collections.ArrayCollection;
         import mx.controls.Alert;
         import mx.events.ItemClickEvent;
         import mx.rpc.events.ResultEvent;
         import mx.utils.ObjectUtil;
    	   import mx.events.CollectionEvent;
         import net.o3s.webflex.components.Util;
         import net.o3s.webflex.bean.Registered;

         [Bindable]
         public var labelIsEmpty:Boolean = true;

		  private var labelInput:String;
        private var rfidInput:String;


         public function init():void {
            currentState = "label";
         }

         public function reset():void {
            currentState = "label";
            L_processing.text = "" ;
            TI_labelValue.text="";
            TI_labelValue.errorString="";
            TI_rfidValue.text="";
            TI_rfidValue.errorString="";
            rfidInput=null;
            labelInput=null;
            TI_labelValue.setFocus();

         }

         private function onFault(ev:Event):void
         {
            Alert.show( ObjectUtil.toString(ev) );
         }

         private function resultSetRfidToLabel(event:ResultEvent):void {

            var registered:Registered = event.result as Registered;

            labelList.addItem({value:TI_labelValue.text,rfid:TI_rfidValue.text});

            L_processing.text = "Association <" + labelInput + " / " + rfidInput + "> OK !" ;
            TI_labelValue.text="";
            TI_labelValue.errorString="";
            TI_rfidValue.text="";
            TI_rfidValue.errorString="";
				rfidInput=null;
			   labelInput=null;
            currentState = "label";
            TI_labelValue.setFocus();


         }


		  private function sendEvent(event:Event):void {
				  if (labelInput != null && labelInput != "" && rfidInput != null && rfidInput != "") {
				 	 L_processing.text = "Association  <" + labelInput + " / " + rfidInput + "> en cours ..." ;
				 	 RO_registering.setRfidToLabel(labelInput,rfidInput);
				  } else {
					  Alert.show("Champ vide","Erreur");
				  }
		  }

		  private function setLabelValue(event:Event):void {
			 labelInput = TI_labelValue.text;
             if (labelInput != null && labelInput != "") {
                  labelIsEmpty = false;
                 currentState = "rfid";
                 L_processing.text = "Dossard '" + TI_labelValue.text + "'";

             } else {
                 Alert.show("Champ vide","Erreur");
             }

          }

        private function setRfidValue(event:Event):void {
          rfidInput = TI_rfidValue.text;
          }

		  private function arrColl_collectionChange(evt:CollectionEvent):void {
			  callLater(autoScrollDataGrid);
		  }

		  private function autoScrollDataGrid():void {
			  if (DG_labels) {
				  DG_labels.validateNow();
				  DG_labels.verticalScrollPosition = DG_labels.maxVerticalScrollPosition;
			  }
		  }
        private function completeLabelState(e:Event):void {
         TI_labelValue.setFocus();
        }
        private function completeRfidState(e:Event):void {
         TI_rfidValue.setFocus();
        }

        private function reinitLabel():void {
         L_processing.text = "" ;
        }

      ]]>
   </mx:Script>

   <mx:RemoteObject id="RO_registering" destination="registering" showBusyCursor="true" fault="onFault(event)">
     <mx:method name="setRfidToLabel" result="resultSetRfidToLabel(event)" fault="Util.handleException(event);reset()"/>
   </mx:RemoteObject>

	<mx:ArrayCollection id="labelList"
						collectionChange="arrColl_collectionChange(event);" />

   <mx:states>
      <mx:State name="label" basedOn="" enterState="completeLabelState(event)">

         <mx:AddChild relativeTo="{HB_rfid}" position="lastChild">
            <mx:Form id="F_label" color="blue" fontSize="40">

               <mx:FormItem label="Dossard" >
                  <mx:TextInput id="TI_labelValue" color="blue" fontSize="40" width="500" enter="setLabelValue(event);" focusOut="reinitLabel();" change="reinitLabel();"/>
               </mx:FormItem>

            </mx:Form>
         </mx:AddChild>
      </mx:State>

      <mx:State name="rfid" basedOn="label" enterState="completeRfidState(event)">

         <mx:RemoveChild target="{F_label}"/>

         <mx:AddChild relativeTo="{HB_rfid}" position="lastChild">
            <mx:Form id ="F_rfid" color="blue" fontSize="40">

               <mx:FormItem label="Rfid" >
                  <mx:TextInput id="TI_rfidValue" color="blue" fontSize="40" width="500" enter="setRfidValue(event);sendEvent(event);" focusOut=""/>
               </mx:FormItem>

            </mx:Form>
         </mx:AddChild>
      </mx:State>

   </mx:states>

   <mx:transitions>
      <mx:Transition id="fromLabelToRfid" fromState="label" toState="rfid">
         <mx:Sequence target="{this}">
            <mx:WipeDown duration="500"/>
         </mx:Sequence>
      </mx:Transition>
      <mx:Transition id="fromRfidToLabel" fromState="rfid" toState="label">
         <mx:Sequence target="{this}">
            <mx:WipeDown duration="500"/>
         </mx:Sequence>
      </mx:Transition>

   </mx:transitions>

   <mx:VBox width="95%" height="60%">

      <components:EventPanel id="MyEventPanel"  width="100%"/>

      <mx:HBox width="100%" height="10%">
         <mx:Panel horizontalAlign="center" title="Association Dossard / Rfid" width="100%" height="100%">
            <mx:HBox id="HB_rfid">

            </mx:HBox>
         </mx:Panel>
      </mx:HBox>

      <mx:HBox width="100%" height="70%">
         <mx:Panel width="100%" height="100%" horizontalAlign="center" title="Associations enregistrees">
            <mx:Label id="L_processing" color="green" text="" fontSize="40" fontWeight="bold" textAlign="right"/>

            <mx:DataGrid id="DG_labels" dataProvider="{labelList}"
                      rowCount="20" verticalScrollPolicy="on" resizableColumns="true" >

               <mx:columns>
                  <mx:DataGridColumn headerText="Value" dataField="value" width="100"/>
                  <mx:DataGridColumn headerText="Date" dataField="rfid" width="150" />
               </mx:columns>

            </mx:DataGrid>

         </mx:Panel>
      </mx:HBox>
   </mx:VBox>
</mx:Canvas>
