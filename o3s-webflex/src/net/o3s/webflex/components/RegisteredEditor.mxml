<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:components="net.o3s.webflex.components.*"
		   creationComplete="init()"
		   width="100%" height="100%" >
<mx:Script>
	<![CDATA[

		import mx.collections.ArrayCollection;

		import mx.validators.Validator;
		import mx.events.ValidationResultEvent;
		import mx.controls.Alert;
		import mx.events.ListEvent;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		import mx.core.IUIComponent;
		import net.o3s.webflex.bean.MyEvent;
		import net.o3s.webflex.bean.Competition;
		import net.o3s.webflex.bean.Registered;
		import net.o3s.webflex.bean.FlexException;
		import mx.events.FlexEvent;
		import net.o3s.webflex.components.Util;

		[Bindable]
		public var competitionList:ArrayCollection= new ArrayCollection([]);

		[Bindable]
		public var competitionIsEmpty:Boolean = true;

		[Bindable]
		public var selectedCompetition:Competition=null;

		[Bindable]
		private var event:MyEvent;

		[Bindable]
		public var submitRegisteredButtonEnabled:Boolean = false;

		[Bindable]
		public var mode:String="create";

		[Bindable]
		public var updateRegistered:Registered=null;

		private var exitCallback:Function = null;

		public function refreshAdminData():void {
			RO_admin.getDefaultEvent();
			RO_admin.getCompetitions();
		}

		private function init():void {

			selectedCompetition = null;
			refreshAdminData();
			competitionIsEmpty = true;
			submitRegisteredButtonEnabled = false;
			competitionList.filterFunction = Util.competitionFilter;
			competitionList.refresh();
			CB_competition.selectedIndex = -1;

			// needed in flex, class must be instancied once
			var fe:FlexException = new FlexException();
			currentState = "";

			// Set the focus on the first field so
			// user does not have to mouse over to it.
			// Note that the user still has to click on the
			// Flex application to give it focus. This is
			// a currently limitation in Flex.
			resetFocus();

			exitCallback = null;

		}

		private function clearAll():void {
			if (currentState == "team") {
				MyTeamEditor.clearAll();
			}
			if (currentState == "team" || currentState == "individual") {
				MyPersonsEditor.clearAll();
			}
			currentState = "";
			CB_competition.selectedItem = -1;
			competitionIsEmpty = true;
			refreshSubmitRegisteredButtonEnabled();
			resetFocus();
			if (exitCallback != null) {
				exitCallback();
			}
		}

		private function resultGetDefaultEvent(event:ResultEvent):void {
			this.event = event.result as MyEvent;
		}

		private function resultGetCompetition(event:ResultEvent):void {
			competitionList = event.result as ArrayCollection;
			competitionList.filterFunction = Util.competitionFilter;
			competitionList.refresh();

			if (mode == "update" &&  selectedCompetition == null) {
				//set selectedCompetition
				selectedCompetition=updateRegistered.competition;
				var idx:int = getIdxCompetition(selectedCompetition.id);
				CB_competition.selectedIndex = getIdxCompetition(selectedCompetition.id);
				competitionIsEmpty = false;
			} else if (mode == "create") {
				CB_competition.selectedIndex = -1;
			}
		}

		private function setCompetition(event:Event):void {
			selectedCompetition=event.currentTarget.selectedItem as Competition;
			if (selectedCompetition != null && selectedCompetition.name != "Unknown") {
				competitionIsEmpty = false;
				if (selectedCompetition.teamed == true) {
					currentState = "team";
				} else {
					currentState = "individual";
				}

			} else {
				competitionIsEmpty = true;
				currentState = "";
			}
			refreshSubmitRegisteredButtonEnabled();
		}

		private function resultCreateRegistered(event:ResultEvent):void {
			var registereds:ArrayCollection = event.result as ArrayCollection;
			var myAlert:Alert;

			var msg:String = "";

			for(var count:int = 0; count < registereds.length; count++)
			{
				var r:Registered = registereds.getItemAt(count, 0) as Registered;
				if (count == 0) {
					msg = msg + "You're are registered to the competition" +
						"'" + r.competition.name + "'" + "\n";
				}

				msg = msg + "'" + r.name + "'";
				msg = msg + " is in the category " +
					"'" + r.category.name + "'" +
					" with the label " +
					"'" + r.label.value + "'." + "\n" ;
			}
			msg = msg + "\n\n";

			msg = msg + "We're looking forward to seeing you at the event '" +
				this.event.name + "' the " +
				formatDateDDMMYYY.format(this.event.date) + ".";

			myAlert = Alert.show(msg, "Registration ok");
			myAlert.height=300;
			myAlert.width=300;

			clearAll();
		}

		private function resultUpdateRegistered(event:ResultEvent):void {
			var registered:Registered = event.result as Registered;
			var myAlert:Alert;

			var msg:String = "";

			msg = msg + "Competition " +
						"'" + registered.competition.name + "'" + "\n";
			msg = msg + "'" + registered.name + "'";
			msg = msg + " is in the category " +
					"'" + registered.category.name + "'" +
					" with the label " +
					"'" + registered.label.value + "'." + "\n" ;

			msg = msg + "\n\n";

			myAlert = Alert.show(msg, "Registration updated");
			myAlert.height=300;
			myAlert.width=300;

			clearAll();
		}

		// Helper method. Sets the focus on the first field so
		// user does not have to mouse over to it.
		private function resetFocus():void {
			focusManager.setFocus(CB_competition);
		}

		private function refreshSubmitRegisteredButtonEnabled():void {

			submitRegisteredButtonEnabled = true;

			if (currentState == "team") {
				submitRegisteredButtonEnabled = submitRegisteredButtonEnabled && MyTeamEditor.formIsValid;
			}

			submitRegisteredButtonEnabled = submitRegisteredButtonEnabled && !competitionIsEmpty;

			if (currentState == "individual" || currentState == "team") {
				submitRegisteredButtonEnabled = submitRegisteredButtonEnabled && MyPersonsEditor.personList.length>0;
			}

		}

		// Submit form if everything is valid.
		private function submitRegisteredForm(event:Event):void	{
			if (mode == "create") {
				var registered:Registered = new Registered();
				registered.persons = MyPersonsEditor.personList;
				registered.event = this.event;
				registered.competition = selectedCompetition;
				if (currentState == "team") {
					registered.name = MyTeamEditor.teamName;
				} else {
					registered.name = "";
				}
				registered.teamed = selectedCompetition.teamed;
				registered.paid = false;
				RO_registering.createRegistered(registered);
			} else if (mode == "update") {
				updateRegistered.persons = MyPersonsEditor.personList;
				updateRegistered.competition = selectedCompetition;
				if (currentState == "team") {
					updateRegistered.name = MyTeamEditor.teamName;
				} else {
					updateRegistered.name = "";
				}
				updateRegistered.teamed = selectedCompetition.teamed;
				updateRegistered.paid = false;
				RO_registering.updateRegistered(updateRegistered);
			}

		}

		// when child component have changed
		public function notifyChangeFromChildComponent():void {
			refreshSubmitRegisteredButtonEnabled();
		}

		// return -1 if not found
		private function getIdxCompetition(id:int):int {

			for(var count:int = 0; count < competitionList.length; count++) {
				var c:Competition = competitionList.getItemAt(count, 0) as Competition;

				if (c.id == id) {
					return count;
				}
			}
			return -1;
		}

		private function completeState(e:Event):void {

			if (mode == "update") {
				//set competition
				if(selectedCompetition == null && competitionList.length != 0) {
					selectedCompetition=updateRegistered.competition;
					var idx:int = getIdxCompetition(selectedCompetition.id);
					CB_competition.selectedIndex = getIdxCompetition(selectedCompetition.id);
					competitionIsEmpty = false;

				}

				//set personsList
				MyPersonsEditor.set4Update(updateRegistered.persons);

				//set team
				if (updateRegistered.teamed == true) {
					MyTeamEditor.set4Update(updateRegistered.name);
				}

				//set others informations
			}

		}


		public function set4Update(registered:Registered):void {

			mode="update";
			selectedCompetition=null;
			updateRegistered = registered;

			//set currentState
			if (registered.teamed == true) {
				this.currentState="team";
			} else {
				this.currentState="individual";
			}
			submitRegisteredButton.label="Update registered";
		}

		// callback set by the caller if wanted
		public function setExitCallback(mycallback:Function):void {
			exitCallback = mycallback;
		}

	]]>
</mx:Script>

	<mx:RemoteObject id="RO_admin" destination="admin" fault="Util.onFault(event)">
		<mx:method name="getCompetitions" result="resultGetCompetition(event)"/>
		<mx:method name="getDefaultEvent" result="resultGetDefaultEvent(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="RO_registering" destination="registering" fault="Util.onFault(event)">
		<mx:method name="createRegistered" result="resultCreateRegistered(event)" fault="Util.handleException(event)"/>
		<mx:method name="updateRegistered" result="resultUpdateRegistered(event)" fault="Util.handleException(event)"/>
	</mx:RemoteObject>

	<mx:DateFormatter formatString="DD/MM/YYYY" id="formatDateDDMMYYY"/>

	<mx:states>
		<mx:State name="individual" enterState="completeState(event)">
			<mx:AddChild relativeTo="{HB_Competition}" position="after">
				<mx:HBox id="HB_Persons" width="100%" height="50%">
					<components:PersonsEditor id="MyPersonsEditor"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="team" basedOn="individual" enterState="completeState(event)">
			<mx:AddChild relativeTo="{HB_Competition}" position="after">
				<mx:HBox id="HB_Team" width="100%" height="20%">
					<components:TeamEditor id="MyTeamEditor"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>

	</mx:states>

	<mx:transitions>
		<mx:Transition id="fromAnyToTeam" fromState="*" toState="team">
			<mx:Sequence target="{this}">
				<mx:WipeDown duration="500"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition id="fromIndividualToInit" fromState="individual" toState="">
			<mx:Sequence target="{this}">
				<mx:Blur duration="200" blurYFrom="20.0" blurYTo="1.0" blurXFrom="20.0" blurXTo="1.0" />
				<mx:RemoveChildAction/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition id="fromTeamToAny" fromState="team" toState="*">
			<mx:Sequence target="{this}">
				<mx:Blur duration="200" blurYFrom="20.0" blurYTo="1.0" blurXFrom="20.0" blurXTo="1.0" />
				<mx:RemoveChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>

	<mx:VBox id="HB_RegisteredEditor" width="100%" height="100%">

		<mx:HBox id="HB_Competition" width="100%" height="10%">
			<mx:Panel title="Competition" width="100%" height="100%" horizontalAlign="center">
				<mx:ComboBox id="CB_competition" dataProvider="{competitionList}" labelField="name" width="200" change="setCompetition(event)"  />
			</mx:Panel>
		</mx:HBox>

		<mx:HBox id="HB_Submit" width="100%" height="10%">
			<mx:Panel title="Registering" width="100%" height="100%">
				<mx:ControlBar horizontalAlign="center">
					<mx:Button
						id="submitRegisteredButton"
						label="Submit registered"
						click="submitRegisteredForm(event);"
						enabled="{submitRegisteredButtonEnabled} "
						/>
					<mx:Button
						label="Cancel"
						click="clearAll();"
						/>
				</mx:ControlBar>
			</mx:Panel>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>
