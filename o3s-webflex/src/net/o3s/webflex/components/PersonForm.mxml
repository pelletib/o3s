<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   creationComplete="init()">
<mx:Script>
	<![CDATA[

		import mx.collections.ArrayCollection;
		import mx.validators.StringValidator;
		import mx.validators.EmailValidator;
		import mx.validators.DateValidator;

		import mx.validators.Validator;
		import mx.events.ValidationResultEvent;
		import mx.controls.Alert;
		import mx.events.ListEvent;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		import mx.core.IUIComponent;
		import mx.utils.StringUtil;
		import mx.controls.List;

		import net.o3s.webflex.bean.Person;

		import mx.rpc.Fault;
		import mx.rpc.events.FaultEvent;

		[Bindable]
		public var formIsValid:Boolean = false;

		[Bindable]
		public var formIsEmpty:Boolean = true;


		// Holds a reference to the currently focussed
		// control on the form.
		private var focussedFormControl:DisplayObject;
		private var personFirstnameValidator:StringValidator;
		private var personLastnameValidator:StringValidator;
		private var personSexValidator:StringValidator;
		private var personClubValidator:StringValidator;
      private var personLicenseValidator:StringValidator;
		private var personEmailValidator:EmailValidator;
		private var personBirthdayValidator:DateValidator;

		[Bindable]
		public var sexList:ArrayCollection = new ArrayCollection(
			[ {label:"M", data:1},
				{label:"F", data:2} ]);

		[Bindable]
		public var firstNameList:ArrayCollection = new ArrayCollection([]);

		[Bindable]
		public var lastNameList:ArrayCollection = new ArrayCollection([]);

		[Bindable]
		public var filteredFirstNameList:ArrayCollection;

		[Bindable]
		public var filteredLastNameList:ArrayCollection;

		private var displayFirstNameList:List = null;
		private var displayLastNameList:List = null;

		[Bindable]
		public var _person:Person = new Person();

		public function get person():Person	{
			_person.firstname = StringUtil.trim(TI_personFirstname.text);
			_person.lastname = StringUtil.trim(TI_personLastname.text);
			_person.sex = CB_personSex.text;
			_person.birthday = DF_personBirthday.selectedDate;
			_person.email = StringUtil.trim(TI_personEmail.text);
			_person.club = StringUtil.trim(TI_personClub.text);
         _person.license = StringUtil.trim(TI_personLicense.text);
			return _person;
		}

		public function set person(value:Person):void {
			_person = value;
			TI_personFirstname.text = _person.firstname;
			TI_personLastname.text = _person.lastname;
			CB_personSex.text = _person.sex;
			DF_personBirthday.selectedDate = _person.birthday;
			displayAge(DF_personBirthday.selectedDate);
			TI_personEmail.text = _person.email;
			TI_personClub.text = _person.club;
         TI_personLicense.text = _person.license;

		}

		private function refreshPredictList():void {
			RO_registering.getFirstNameWithPrefix(null);
			RO_registering.getLastNameWithPrefix(null);
		}

		private function resultGetFirstNameWithPrefix(event:ResultEvent):void {
			firstNameList = event.result as ArrayCollection;
		}

		private function resultGetLastNameWithPrefix(event:ResultEvent):void {
			lastNameList = event.result as ArrayCollection;
		}

		private function init():void {
			//
			// Create validators
			//
			personFirstnameValidator = new StringValidator();
			personFirstnameValidator.source = TI_personFirstname;
			personFirstnameValidator.property = "text";
			personFirstnameValidator.minLength = 2;
			personFirstnameValidator.required=true;

			personLastnameValidator = new StringValidator();
			personLastnameValidator.source = TI_personLastname;
			personLastnameValidator.property = "text";
			personLastnameValidator.minLength = 2;
			personLastnameValidator.required=true;

			personSexValidator = new StringValidator();
			personSexValidator.source = CB_personSex;
			personSexValidator.property = "text";
			personSexValidator.minLength = 1;
			personSexValidator.maxLength = 1;
			personSexValidator.required=true;

			personClubValidator = new StringValidator();
			personClubValidator.source = TI_personClub;
			personClubValidator.property = "text";
			personClubValidator.minLength = 2;
			personClubValidator.required=false;

         personLicenseValidator = new StringValidator();
         personLicenseValidator.source = TI_personLicense;
         personLicenseValidator.property = "text";
         personLicenseValidator.minLength = 2;
         personLicenseValidator.required=false;

			personBirthdayValidator = new DateValidator();
			personBirthdayValidator.source = DF_personBirthday;
			personBirthdayValidator.property = "text";
			personBirthdayValidator.allowedFormatChars="/";
			personBirthdayValidator.inputFormat="DD/MM/YYYY";
			personBirthdayValidator.required=true;

			personEmailValidator = new EmailValidator();
			personEmailValidator.source = TI_personEmail;
			personEmailValidator.property = "text";
			personEmailValidator.required=false;

			removeDisplayList();

			refreshPredictList();
		}

		// Clear the form and reset validation.
		public function clearFormHandler():void	{
			// Clear all input fields.
			TI_personFirstname.text = "";
			TI_personLastname.text = "";
			TI_personEmail.text = "";
			TI_personClub.text = "";
         TI_personLicense.text = "";
			DF_personBirthday.text = "";
			DF_personBirthday.selectedDate = null;
			CB_personSex.selectedIndex=-1;
			L_age.text = "Age: N/A";


			// Clear validation error messages.
			TI_personFirstname.errorString = "";
			TI_personLastname.errorString = "";
			TI_personEmail.errorString = "";
			TI_personClub.errorString = "";
         TI_personLicense.errorString = "";
			DF_personBirthday.errorString = "";
			CB_personSex.errorString = "";

			// Flag that the form is now clear
			formIsEmpty = true;
			formIsValid = false;

			_person = new Person();

			removeDisplayList();
			refreshPredictList();

		}

		// Validate the form
		private function validateForm(event:Event):void	{
			// Save a reference to the currently focussed form control
			// so that the isValid() helper method can notify only
			// the currently focussed form control and not affect
			// any of the other form controls.
			focussedFormControl = event.target as DisplayObject;

			// Mark the form as valid to start with
			formIsValid = true;

			// Check if form is empty
			formIsEmpty = ( StringUtil.trim(TI_personFirstname.text) == "" &&
				            StringUtil.trim(TI_personLastname.text) == ""  &&
						    StringUtil.trim(DF_personBirthday.text) == "");

			// Run each validator in turn, using the isValid()
			// helper method and update the value of formIsValid
			// accordingly.
			validatePerson(personFirstnameValidator);
			validatePerson(personLastnameValidator);
			validatePerson(personSexValidator);
			validatePerson(personBirthdayValidator);
			validatePerson(personEmailValidator);
			validatePerson(personClubValidator);
         validatePerson(personLicenseValidator);

			this.parentDocument.resultValidatePersonForm(formIsValid);

		}


		// Helper method. Performs validation on a passed Validator instance.
		// Validator is the base class of all Flex validation classes so
		// you can pass any validation class to this method.
		private function validatePerson(validator:Validator):Boolean {
			// Get a reference to the component that is the
			// source of the validator.
			var validatorSource:DisplayObject = validator.source as DisplayObject;

			// Suppress events if the current control being validated is not
			// the currently focussed control on the form. This stops the user
			// from receiving visual validation cues on other form controls.
			var suppressEvents:Boolean = (validatorSource != focussedFormControl);

			// Carry out validation. Returns a ValidationResultEvent.
			// Passing null for the first parameter makes the validator
			// use the property defined in the property tag of the
			// <mx:Validator> tag.
			var event:ValidationResultEvent = validator.validate(null, suppressEvents);

			// Check if validation passed and return a boolean value accordingly.
			var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);

			// Update the formIsValid flag
			formIsValid = formIsValid && currentControlIsValid;

			return currentControlIsValid;
		}


		// Compute Age from date of birthday
		private function computeAge(userDOB:Date):int {
			var today : Date = new Date();
			var diff : Date = new Date(); diff.setTime( today.getTime() - userDOB.getTime() );
			var userAge : int = diff.getFullYear() - 1970;
			return userAge;
		}

		private function displayAge(date:Date):void {
			if (date == null)
				L_age.text = "Age: N/A";
			else
				L_age.text = "Age: " + computeAge(date);
		}

		public function resetFocus():void {
			focusManager.setFocus(TI_personFirstname);
		}

		private function predictFirstName(p_event:Event):void {
			var predictText:String = p_event.target.text;

			removeDisplayFirstNameList();

			if (predictText.length > 0) {
				filteredFirstNameList = new ArrayCollection();

				// For each item in the data provider
				for(var i:Number = 0; i < firstNameList.length; i ++) {
					if((firstNameList[i].toLowerCase()).indexOf(predictText.toLowerCase()) == 0) {
						filteredFirstNameList.addItem(firstNameList[i]);
					}
				}

				if (filteredFirstNameList.length > 0) {

					// position and add the new results view
					displayFirstNameList = new List();
					displayFirstNameList.dataProvider = filteredFirstNameList;
					displayFirstNameList.rowCount = filteredFirstNameList.length;
					displayFirstNameList.x = TI_personFirstname.x + TI_personFirstname.width;
					displayFirstNameList.y = TI_personFirstname.y + TI_personFirstname.height;
					displayFirstNameList.width = TI_personFirstname.width;
					addChild(displayFirstNameList);

					displayFirstNameList.removeEventListener("change", onFirstNameSelected);
					displayFirstNameList.addEventListener("change", onFirstNameSelected);
				}
			}
		}

		private function onFirstNameSelected(p_event:Event):void	{
			// Set the text value
			TI_personFirstname.text = p_event.target.selectedItem.toString();
			removeDisplayFirstNameList();

		}

		private function removeDisplayFirstNameList():void	{
			if (displayFirstNameList != null) {
				removeChild(displayFirstNameList); // Remove the list from the display list
				displayFirstNameList = null;
			}
		}


		private function predictLastName(p_event:Event):void {
			var predictText:String = p_event.target.text;

			removeDisplayLastNameList();

			if (predictText.length > 0) {
				filteredLastNameList = new ArrayCollection();

				// For each item in the data provider
				for(var i:Number = 0; i < lastNameList.length; i ++) {
					if((lastNameList[i].toLowerCase()).indexOf(predictText.toLowerCase()) == 0) {
						filteredLastNameList.addItem(lastNameList[i]);
					}
				}

				if (filteredLastNameList.length > 0) {

					// position and add the new results view
					displayLastNameList = new List();
					displayLastNameList.dataProvider = filteredLastNameList;
					displayLastNameList.rowCount = filteredLastNameList.length;
					displayLastNameList.x = TI_personLastname.x + TI_personLastname.width ;
					displayLastNameList.y = TI_personLastname.y + TI_personLastname.height * 2;
					displayLastNameList.width = TI_personLastname.width;
					addChild(displayLastNameList);

					displayLastNameList.removeEventListener("change", onLastNameSelected);
					displayLastNameList.addEventListener("change", onLastNameSelected);
				}
			}
		}

		private function onLastNameSelected(p_event:Event):void	{
			// Set the text value
			TI_personLastname.text = p_event.target.selectedItem.toString();
			removeDisplayLastNameList();
		}

		private function removeDisplayLastNameList():void	{
			if (displayLastNameList != null) {
				removeChild(displayLastNameList); // Remove the list from the display list
				displayLastNameList = null;
			}
		}

		private function removeDisplayList():void {
			removeDisplayLastNameList();
			removeDisplayFirstNameList();
		}

		// if the person (lastname, firstname, birthday) are filled and the person exists, move to the edit mode
		private function checkIfPersonExist():void {

			if (StringUtil.trim(TI_personFirstname.text) != "" &&
				StringUtil.trim(TI_personLastname.text) != ""  &&
				StringUtil.trim(DF_personBirthday.text) != "") {

				RO_registering.getPerson(
					StringUtil.trim(TI_personLastname.text),
					StringUtil.trim(TI_personFirstname.text),
					DF_personBirthday.selectedDate);

			}
		}

		// if the person exist, edit it
		private function resultGetPerson(event:ResultEvent):void {
			var person:Person = event.result as Person;

			if (person != null) {
				this.parentDocument.editPerson(person);
				//Alert.show("person exist");
			} else {
				//Alert.show("person doesn't exist");
			}
		}


	]]>
</mx:Script>

	<mx:RemoteObject id="RO_registering" destination="registering" fault="Util.onFault(event)">
		<mx:method name="getFirstNameWithPrefix" result="resultGetFirstNameWithPrefix(event)" fault="Util.handleException(event)"/>
		<mx:method name="getLastNameWithPrefix" result="resultGetLastNameWithPrefix(event)" fault="Util.handleException(event)"/>
		<mx:method name="getPerson" result="resultGetPerson(event)" fault="Util.handleException(event)"/>

	</mx:RemoteObject>

	<mx:Form>
		<mx:FormItem label="Prenom" >
			<mx:TextInput id="TI_personFirstname" width="150" change="removeDisplayList();validateForm(event);predictFirstName(event);" enter="removeDisplayList()" focusOut="removeDisplayList();checkIfPersonExist()"/>
		</mx:FormItem>
		<mx:FormItem label="Nom" >
			<mx:TextInput id="TI_personLastname" width="150" change="removeDisplayList();validateForm(event);predictLastName(event);" enter="removeDisplayList()" focusOut="removeDisplayList();checkIfPersonExist()"/>
		</mx:FormItem>
		<mx:FormItem label="Sexe" >
			<mx:ComboBox id="CB_personSex" dataProvider="{sexList}" width="50" change="removeDisplayList();validateForm(event);"/>
		</mx:FormItem>

		<mx:FormItem label="Date de naissance" >
         <mx:HBox>
			<mx:DateField id="DF_personBirthday"
						  yearNavigationEnabled="true"
						  editable="true"
						  formatString="DD/MM/YYYY"
						  textAlign="center"
						  fontSize="9"
						  selectableRange="{{rangeStart : new Date(1900,0,1), rangeEnd : new Date()}}"
						  change="removeDisplayList();validateForm(event);displayAge(DateField(event.target).selectedDate);"
						  focusOut="checkIfPersonExist()"/>

			<mx:Label id="L_age" text="Age: N/A" textAlign="right"/>
         </mx:HBox>
		</mx:FormItem>

		<mx:FormItem label="Club" direction="horizontal" >
			<mx:TextInput id="TI_personClub" width="150" change="removeDisplayList();validateForm(event);"/>
		</mx:FormItem>
      <mx:FormItem label="License" direction="horizontal" >
         <mx:TextInput id="TI_personLicense" width="150" change="removeDisplayList();validateForm(event);"/>
      </mx:FormItem>
		<mx:FormItem label="Email" direction="horizontal" >
			<mx:TextInput id="TI_personEmail" width="150" restrict="A-Za-z0-9\-_@." change="removeDisplayList();validateForm(event);"/>
		</mx:FormItem>
	</mx:Form>
</mx:Canvas>
