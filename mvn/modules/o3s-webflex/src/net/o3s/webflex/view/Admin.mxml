<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="init()">

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
         import mx.collections.ArrayCollection;
         import mx.managers.PopUpManager;
         import mx.events.CloseEvent;

			import net.o3s.webflex.bean.Category;
			import net.o3s.webflex.bean.Competition;
			import net.o3s.webflex.bean.MyEvent;
         import net.o3s.webflex.components.EventScreen;
         import net.o3s.webflex.components.CompetitionScreen;
         import net.o3s.webflex.components.CategoryScreen;
         import net.o3s.webflex.components.StartingDateScreen;
         import net.o3s.webflex.components.Util;

         [Bindable]
         public var importFileName:String="";

         [Bindable]
         public var actionImportEnabled:Boolean = false;

			[Bindable]
			private var editedEvent:MyEvent= null;

			[Bindable]
			private var eventList:ArrayCollection= new ArrayCollection([]);

         private var eventScreen:EventScreen = null;

         [Bindable]
         private var editedCompetition:Competition= null;

         [Bindable]
         private var competitionList:ArrayCollection= new ArrayCollection([]);

         [Bindable]
         private var competitionFilterCatEventList:ArrayCollection= new ArrayCollection([]);

         private var competitionScreen:CompetitionScreen = null;
         private var startingDateScreen:StartingDateScreen = null;

         [Bindable]
         private var editedCategory:Category= null;

         [Bindable]
         private var categoryList:ArrayCollection= new ArrayCollection([]);

         private var categoryScreen:CategoryScreen = null;

         private var mode:String = "unknown";

         [Bindable]
         private var selectedEvent4AddCompetition:MyEvent = null;

         [Bindable]
         private var selectedEvent4AddCategory:MyEvent = null;

         public function init():void {
            refreshAdminData();

            this.eventScreen = new EventScreen();
            this.eventScreen.addEventListener("SaveEvent", saveEvent);

            this.competitionScreen = new CompetitionScreen();
            this.competitionScreen.addEventListener("SaveCompetition", saveCompetition);
            this.competitionScreen.addEventListener("CloseCompetition", cancelCompetition);

            this.startingDateScreen = new StartingDateScreen();
            this.startingDateScreen.addEventListener("SaveStartingDate", saveStartingDate);
            this.startingDateScreen.addEventListener("CloseStartingDate", cancelStartingDate);

            this.categoryScreen = new CategoryScreen();
            this.categoryScreen.addEventListener("SaveCategory", saveCategory);
            this.categoryScreen.addEventListener("CloseCategory", cancelCategory);

            competitionFilterCatEventList.filterFunction = competitionFilter4Category;
            competitionFilterCatEventList.refresh();

         }

         public function onClickRefresh(ev:Event):void {
            refreshAdminData();
         }

			public function refreshAdminData():void {
            RO_admin.getAllEvents();
				RO_admin.getAllCompetitions();
				RO_admin.getAllCategories();
			}

			private function displayEvent(item:Object, col:DataGridColumn):String
			{
				return item.event.id;
			}

			private function displayCompetitions(item:Object, col:DataGridColumn):String
			{
            //Alert.show( ObjectUtil.toString(item) );
				return displayCompetitionsAsString(item);
			}

         private function displayCompetitionsAsString(item:Object):String
         {
            if (item.competitions == null)
            {
            Alert.show("error : competitions is null");
            return null;

            } else
            {
             var msg:String="";

            var category:Category = item as Category;

            for(var count:int = 0; count < category.competitions.length; count++)
            {
               var c:Competition = category.competitions.list.getItemAt(count, 0) as Competition;
               if (count == 0) {
                  msg += c.id ;
               }
               else {
                  msg += "," + c.id ;
              }
            }

            return msg;
            }
         }

         private function onFault(ev:Event):void
         {
            Alert.show("error");
         }

         private function buildEventTip(item:Object):String
         {
            var myString:String = "";
            if(item != null)
            {
               myString = myString + item.id + ",";
               myString = myString + item.name + ",";
               myString = myString + item.date + ",";
               myString = myString + item.theDefault + "\n";
            }
            return myString;
         }

        private function buildCompetitionTip(item:Object):String
         {
            var myString:String = "";
            if(item != null)
            {
               myString = myString + item.id + ",";
               myString = myString + item.event.id + ",";
               myString = myString + item.name + ",";
               myString = myString + item.lowerLabelNumber + ",";
               myString = myString + item.higherLabelNumber + ",";
               myString = myString + item.lastLabelNumber + ",";
               myString = myString + item.teamed + ",";
               myString = myString + item.startingDate + "\n";
            }
            return myString;
         }

        private function buildCategoryTip(item:Object):String
         {
            var myString:String = "";
            if(item != null)
            {
               myString = myString + item.id + ",";
               myString = myString + item.event.id + ",";
               myString = myString + item.name + ",";
               myString = myString + item.sex + ",";
               myString = myString + item.shortName + ",";
               myString = myString + item.minDate + ",";
               myString = myString + item.maxDate + ",";
               myString = myString + "(" + displayCompetitionsAsString(item) + ")" + "\n";
            }
            return myString;
         }

         public function onClickExport(ev:Event):void {
            RO_admin.exportRegisteredAsFileName(DF_export.selectedDate);
         }

        public function onClickImport(ev:Event):void {
            RO_admin.importRegistered(importFileName);
            actionImportEnabled = false;
            importFileName="";
            TI_importFileName.text="";

         }

        private function resultExportRegisteredAsFileName(event:ResultEvent):void {
           var fileName:String = event.result as String;
           Alert.show("Le fichier <" + fileName + "> est disponible sur le serveur.");
        }

         private function setImportFileName(event:Event):void {
            importFileName=StringUtil.trim(TI_importFileName.text);
            actionImportEnabled = true;
         }

        private function resultImportFileName(event:ResultEvent):void {
           var nb:int = event.result as int;
           Alert.show("<" + nb + "> lignes ont ete traitees.");
        }


         // EVENT
         private function resultSetDefaultEvent(event:ResultEvent):void {
            refreshAdminData();
         }

			private function resultGetAllEvents(event:ResultEvent):void {
				eventList = event.result as ArrayCollection;
            for(var count:int = 0; count < eventList.length; count++) {
               var r:MyEvent = eventList.getItemAt(count, 0) as MyEvent;
               if (r.theDefault == true) {
                  selectEvent4AddCompetition.selectedItem = -1;
                  selectEvent4AddCategory.selectedItem = -1;
                  selectedEvent4AddCompetition = null;
                  selectedEvent4AddCategory = null;
               }
            }
			}

			// return null if not found
			private function getEvent(id:int):MyEvent {

				for(var count:int = 0; count < eventList.length; count++) {
					var r:MyEvent = eventList.getItemAt(count, 0) as MyEvent;
					if (r.id == id) {
						return r;
					}
				}
				return null;
			}

			public function removeEvent(id:int):void {
				var r:MyEvent = getEvent(id);
				if (r == null) {
					Alert.show("Enregistrement inconnu <" + id + ">");
				} else {
               RO_admin.removeEvent(r.id);
				}
			}
         private function resultRemoveEvent(event:ResultEvent):void {
               refreshAdminData();
         }

			public function editEvent(id:int):void {
				var r:MyEvent = getEvent(id);
				if (r == null) {
					Alert.show("Enregistrement inconnu <" + id + ">");
				} else {
               mode="edit";
					editedEvent = r;
               PopUpManager.addPopUp(this.eventScreen, this, true);
               PopUpManager.centerPopUp(this.eventScreen);
               this.eventScreen.eventName.text = r.name;
               this.eventScreen.eventDate.selectedDate = r.date;
				}
			}

			public function setEventAsDefault(id:int):void {
				var r:MyEvent = getEvent(id);
				if (r == null) {
					Alert.show("Enregistrement inconnu <" + id + ">");
				} else {
               RO_admin.setDefaultEvent(r.id);
				}
			}

         public function duplicateEvent(id:int):void {
            var r:MyEvent = getEvent(id);
            if (r == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               RO_admin.duplicateEvent(r.id);
            }
         }
         private function resultDuplicateEvent(event:ResultEvent):void {
               refreshAdminData();
         }

         private function addMyEvent():void {
            mode="add";
            PopUpManager.addPopUp(this.eventScreen, this, true);
            PopUpManager.centerPopUp(this.eventScreen);
            this.eventScreen.eventName.text = "";
            this.eventScreen.eventDate.text = "";
         }

         private function saveEvent(e:Event):void {
            if (mode == "add") {
               var ev:MyEvent = new MyEvent();
               ev.name = this.eventScreen.eventName.text;
               ev.date = this.eventScreen.eventDate.selectedDate;
               RO_admin.createEvent(ev);
            } else {
               editedEvent.name = this.eventScreen.eventName.text;
               editedEvent.date = this.eventScreen.eventDate.selectedDate;
               RO_admin.updateEvent(editedEvent);
            }
            PopUpManager.removePopUp(this.eventScreen);

         }
         private function resultCreateEvent(event:ResultEvent):void {
               RO_admin.getAllEvents();
         }

        // COMPETITION
         private function resultGetAllCompetitions(event:ResultEvent):void {
            competitionList = event.result as ArrayCollection;
            competitionFilterCatEventList.removeAll();
            for(var count:int = 0; count < competitionList.length; count++) {
               var c:Competition = competitionList.getItemAt(count, 0) as Competition;
               competitionFilterCatEventList.addItem(c);
            }
            competitionFilterCatEventList.filterFunction = competitionFilter4Category;
            competitionFilterCatEventList.refresh();

         }

         // return null if not found
         private function getCompetition(id:int):Competition {

            for(var count:int = 0; count < competitionList.length; count++) {
               var c:Competition = competitionList.getItemAt(count, 0) as Competition;
               if (c.id == id) {
                  return c;
               }
            }
            return null;
         }

         public function removeCompetition(id:int):void {
            var c:Competition = getCompetition(id);
            if (c == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               RO_admin.removeCompetition(c.id);
            }
         }
         private function resultRemoveCompetition(event:ResultEvent):void {
               RO_admin.getAllCompetitions();
         }

         public function editCompetition(id:int):void {
            var c:Competition = getCompetition(id);
            if (c == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               mode="edit";
               editedCompetition = c;
               PopUpManager.addPopUp(this.competitionScreen, this, true);
               PopUpManager.centerPopUp(this.competitionScreen);
               this.competitionScreen.competitionEventName.text = c.event.name;
               this.competitionScreen.competitionName.text = c.name;
               this.competitionScreen.competitionLowerLabelNumber.text = c.lowerLabelNumber.toString();
               this.competitionScreen.competitionHigherLabelNumber.text = c.higherLabelNumber.toString();
               this.competitionScreen.competitionLastLabelNumber.text = c.lastLabelNumber.toString();
               this.competitionScreen.competitionTeam.selectedValue = c.teamed;
            }
         }

         private function addCompetition():void {
            mode="add";
            PopUpManager.addPopUp(this.competitionScreen, this, true);
            PopUpManager.centerPopUp(this.competitionScreen);
            this.competitionScreen.competitionName.text = "";
            this.competitionScreen.competitionEventName.text = selectedEvent4AddCompetition.name;
            this.competitionScreen.competitionLowerLabelNumber.text = "";
            this.competitionScreen.competitionHigherLabelNumber.text = "";
            this.competitionScreen.competitionLastLabelNumber.text = "";
            this.competitionScreen.dispatchEvent(new Event("change"));

         }

         private function cancelCompetition(e:Event):void {
            refreshAdminData();
         }

         private function saveCompetition(e:Event):void {
            if (mode == "add") {
               var c:Competition = new Competition();
               c.name = this.competitionScreen.competitionName.text;
               c.event = selectedEvent4AddCompetition;
               c.lowerLabelNumber = parseInt(this.competitionScreen.competitionLowerLabelNumber.text);
               c.higherLabelNumber = parseInt(this.competitionScreen.competitionHigherLabelNumber.text);
               c.lastLabelNumber = parseInt(this.competitionScreen.competitionLastLabelNumber.text);
               c.teamed = this.competitionScreen.competitionTeamed;
               RO_admin.createCompetition(c);

            } else {
               editedCompetition.name = this.competitionScreen.competitionName.text;
               // Event is read-only here
               //editedCompetition.event = selectedEvent4AddCompetition;
               editedCompetition.lowerLabelNumber = parseInt(this.competitionScreen.competitionLowerLabelNumber.text);
               editedCompetition.higherLabelNumber = parseInt(this.competitionScreen.competitionHigherLabelNumber.text);
               editedCompetition.lastLabelNumber = parseInt(this.competitionScreen.competitionLastLabelNumber.text);
               editedCompetition.teamed = this.competitionScreen.competitionTeamed;
               RO_admin.updateCompetition(editedCompetition);
            }
            PopUpManager.removePopUp(this.competitionScreen);

         }

         public function editStartingDate(id:int):void {
            var c:Competition = getCompetition(id);
            if (c == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               PopUpManager.addPopUp(this.startingDateScreen, this, true);
               PopUpManager.centerPopUp(this.startingDateScreen);
               this.startingDateScreen.eventName.text = c.event.name;
               this.startingDateScreen.competitionName.text = c.name;
               this.startingDateScreen.idCompetition = c.id;
               if (c.startingDate == null) {
                  this.startingDateScreen.picker.selectedDate = new Date();

               } else {
                  this.startingDateScreen.picker.selectedDate = c.startingDate;
                  this.startingDateScreen.dispatchEvent(new Event("change"));
               }
            }
         }

         private function cancelStartingDate(e:Event):void {
            refreshAdminData();
         }

         private function saveStartingDate(e:Event):void {
            RO_admin.setStartDate(this.startingDateScreen.idCompetition, this.startingDateScreen.date);
            PopUpManager.removePopUp(this.startingDateScreen);
         }

         private function resultSetStartDate(event:ResultEvent):void {
               RO_admin.getAllCompetitions();
         }

         private function resultCreateCompetition(event:ResultEvent):void {
               RO_admin.getAllCompetitions();
         }

         private function setEvent4AddCompetition(e:Event):void {
            selectedEvent4AddCompetition=e.currentTarget.selectedItem as MyEvent;
         }

        // CATEGORY
          private function resultGetAllCategories(event:ResultEvent):void {
            categoryList = event.result as ArrayCollection;
         }

         // return null if not found
         private function getCategory(id:int):Category {

            for(var count:int = 0; count < categoryList.length; count++) {
               var c:Category = categoryList.getItemAt(count, 0) as Category;
               if (c.id == id) {
                  return c;
               }
            }
            return null;
         }

         public function removeCategory(id:int):void {
            var c:Category = getCategory(id);
            if (c == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               RO_admin.removeCategory(c.id);
            }
         }
         private function resultRemoveCategory(event:ResultEvent):void {
               RO_admin.getAllCategories();
         }

         public function editCategory(id:int):void {
            var c:Category = getCategory(id);
            if (c == null) {
               Alert.show("Enregistrement inconnu <" + id + ">");
            } else {
               mode="edit";
               editedCategory = c;
               competitionFilterCatEventList.refresh();

               PopUpManager.addPopUp(this.categoryScreen, this, true);
               PopUpManager.centerPopUp(this.categoryScreen);
               this.categoryScreen.categoryName.text = c.name;
               this.categoryScreen.categorySex.text = c.sex;
               this.categoryScreen.categoryShortName.text = c.shortName;
               this.categoryScreen.categoryMinDate.selectedDate = c.minDate;
               this.categoryScreen.categoryMaxDate.selectedDate = c.maxDate;
               this.categoryScreen.selectedCompetitions=c.competitions;
               var compList:ArrayCollection= new ArrayCollection([]);

               for(var count:int = 0; count < competitionList.length; count++) {
                  var comp:Competition = competitionList.getItemAt(count, 0) as Competition;
                  if (comp.event.id == editedCategory.event.id) {
                     compList.addItem(comp);
                  }
               }
               this.categoryScreen.competitionList=compList;
               this.categoryScreen.initCompetitions();
               this.categoryScreen.categoryEventName.text = c.event.name;

            }
         }

         private function addCategory():void {
            mode="add";
            PopUpManager.addPopUp(this.categoryScreen, this, true);
            PopUpManager.centerPopUp(this.categoryScreen);
            this.categoryScreen.categoryName.text = "";
            this.categoryScreen.categorySex.selectedIndex=-1;
            this.categoryScreen.categoryShortName.text = "";
            this.categoryScreen.categoryMinDate.text = "";
            this.categoryScreen.categoryMaxDate.text = "";
            this.categoryScreen.selectedCompetitions.removeAll();
            var compList:ArrayCollection= new ArrayCollection([]);
            for(var count:int = 0; count < competitionList.length; count++) {
                  var comp:Competition = competitionList.getItemAt(count, 0) as Competition;
                  if (comp.event.id == selectedEvent4AddCategory.id) {
                     compList.addItem(comp);
                  }
            }
            this.categoryScreen.competitionList=compList;
            this.categoryScreen.initCompetitions();
            this.categoryScreen.categoryEventName.text = selectedEvent4AddCategory.name;

         }

         private function cancelCategory(e:Event):void {
            refreshAdminData();
         }

         private function saveCategory(e:Event):void {
            if (mode == "add") {
               var c:Category = new Category();
               c.name = this.categoryScreen.categoryName.text;
               c.sex = this.categoryScreen.categorySex.text;
               c.shortName = this.categoryScreen.categoryShortName.text;
               c.minDate = this.categoryScreen.categoryMinDate.selectedDate;
               c.maxDate = this.categoryScreen.categoryMaxDate.selectedDate;
               c.competitions = this.categoryScreen.selectedCompetitions;
               c.event = selectedEvent4AddCategory;

               RO_admin.createCategory(c);
            } else {
               editedCategory.name = this.categoryScreen.categoryName.text;
               editedCategory.sex = this.categoryScreen.categorySex.text;
               editedCategory.shortName = this.categoryScreen.categoryShortName.text;
               editedCategory.minDate = this.categoryScreen.categoryMinDate.selectedDate;
               editedCategory.maxDate = this.categoryScreen.categoryMaxDate.selectedDate;
               editedCategory.competitions = this.categoryScreen.selectedCompetitions;
               // event is read-only here, doesn't set it
               RO_admin.updateCategory(editedCategory);
            }
            PopUpManager.removePopUp(this.categoryScreen);

         }
         private function resultCreateCategory(event:ResultEvent):void {
               RO_admin.getAllCategories();
         }

        private function setEvent4AddCategory(e:Event):void {
            selectedEvent4AddCategory=e.currentTarget.selectedItem as MyEvent;
            competitionFilterCatEventList.refresh();
         }

        public function competitionFilter4Category(item:Object):Boolean {
           var c:Competition = item as Competition;
           if (selectedEvent4AddCategory != null) {
            return (c.event.id == selectedEvent4AddCategory.id);
           } else {
            return true;
           }
        }

         private function resultResetAll(event:ResultEvent):void {
            refreshAdminData();
         }

         public function onClickReset(event:CloseEvent):void {
            if(event.detail == Alert.OK) {
               RO_registering.resetAll();
            }
         }

         private function confirmClickReset():void {
            var msg:String="";
            msg = "inscrits";
            Alert.show("Etes-vous sure de vouloir supprimer toutes les inscriptions et reinitialiser les competitions ?",
               "Reset ?",
               Alert.OK | Alert.CANCEL,
               this,
               onClickReset,
               null,
               Alert.OK);
         }

		]]>
	</mx:Script>

	<mx:RemoteObject id="RO_admin" destination="admin" showBusyCursor="true" fault="onFault(event)">
    	<mx:method name="getAllEvents" result="resultGetAllEvents(event)"/>
      <mx:method name="setDefaultEvent" result="resultSetDefaultEvent(event)"/>
      <mx:method name="createEvent" result="resultCreateEvent(event)" fault="Util.handleException(event)"/>
      <mx:method name="removeEvent" result="resultRemoveEvent(event)" fault="Util.handleException(event)"/>
      <mx:method name="duplicateEvent" result="resultDuplicateEvent(event)" fault="Util.handleException(event)"/>

      <mx:method name="getAllCompetitions" result="resultGetAllCompetitions(event)"/>

      <mx:method name="createCompetition" result="resultCreateCompetition(event)" fault="Util.handleException(event)"/>
      <mx:method name="removeCompetition" result="resultRemoveCompetition(event)" fault="Util.handleException(event)"/>
      <mx:method name="setStartDate" result="resultSetStartDate(event)" fault="Util.handleException(event)"/>

      <mx:method name="getAllCategories" result="resultGetAllCategories(event)"/>
      <mx:method name="createCategory" result="resultCreateCategory(event)" fault="Util.handleException(event)"/>
      <mx:method name="removeCategory" result="resultRemoveCategory(event)" fault="Util.handleException(event)"/>

      <mx:method name="exportRegisteredAsFileName" result="resultExportRegisteredAsFileName(event)"/>
      <mx:method name="importRegistered" result="resultImportFileName(event)"/>

	</mx:RemoteObject>
   <mx:RemoteObject id="RO_registering" destination="registering" showBusyCursor="true" fault="onFault(event)">
      <mx:method name="resetAll" result="resultResetAll(event)"/>
   </mx:RemoteObject>
	<mx:VBox width="95%" height="60%">

      <mx:HBox width="100%" height="10%">

		 <mx:Panel width="100%" height="100%" horizontalAlign="center" title="Action">

          <mx:ControlBar horizontalAlign="center">
            <mx:VBox width="100%" horizontalAlign="left">
                <mx:Button label="Refresh" id="B_refresh"
                         click="onClickRefresh(event)" enabled="true"/>
                <mx:HBox>
                <mx:HBox horizontalAlign="left">
                  <mx:Button label="Export" id="B_export"
                         click="onClickExport(event)" enabled="true"/>
                  <mx:DateField id="DF_export"
                    yearNavigationEnabled="true"
                    editable="true"
                    formatString="DD/MM/YYYY"
                    textAlign="center"
                    fontSize="9"
                    selectableRange="{{rangeStart : new Date(1900,0,1), rangeEnd : new Date()}}"/>

                </mx:HBox>

                <mx:HBox horizontalAlign="left">
                  <mx:Button label="Import" id="B_import"
                         click="onClickImport(event)" enabled="${actionImportEnabled}"/>
                  <mx:TextInput id="TI_importFileName" width="400" change="setImportFileName(event);"/>
                </mx:HBox>
                </mx:HBox>

                <mx:Button label="RESET TOTAL (inscriptions-courses)" id="B_reset"
                         click="confirmClickReset()" enabled="true"/>

            </mx:VBox>

          </mx:ControlBar>

		 </mx:Panel>
      </mx:HBox>

      <mx:HBox width="100%" height="20%">

      <mx:Panel width="100%" height="100%" horizontalAlign="center" title="Event">
         <mx:DataGrid id="DG_events" dataProvider="{RO_admin.getAllEvents.lastResult}" dataTipFunction="buildEventTip"
                      rowCount="2"  horizontalScrollPolicy="on" verticalScrollPolicy="on" resizableColumns="true" >
            <mx:columns>
               <mx:DataGridColumn headerText="Id" dataField="id" showDataTips="true" width="50"/>
               <mx:DataGridColumn headerText="Name" dataField="name" showDataTips="true" width="300"/>
               <mx:DataGridColumn headerText="Date" dataField="date" showDataTips="true" width="300" labelFunction="Util.getDateDDMMYYLabel"/>
               <mx:DataGridColumn headerText="Default" dataField="theDefault" showDataTips="true" width="100"/>
				<mx:DataGridColumn width="150" headerText="Actions"
								   itemRenderer="net.o3s.webflex.components.ActionEventDataGridColumnItemRenderer" />
            </mx:columns>
         </mx:DataGrid>
         <mx:Button label="Ajouter" click="addMyEvent()"/>
      </mx:Panel>
      </mx:HBox>


	   <mx:HBox width="100%" height="30%">
		<mx:Panel width="100%" height="100%" horizontalAlign="center" title="Competition">
			<mx:DataGrid id="DG_competitions" dataProvider="{RO_admin.getAllCompetitions.lastResult}" dataTipFunction="buildCompetitionTip"
                      rowCount="5"  horizontalScrollPolicy="on" verticalScrollPolicy="on" resizableColumns="true" >
				<mx:columns>
					<mx:DataGridColumn headerText="Id" dataField="id" showDataTips="true" width="50"/>
               <mx:DataGridColumn headerText="Event" labelFunction="displayEvent" showDataTips="true" width="50"/>
					<mx:DataGridColumn headerText="Name" dataField="name" showDataTips="true" width="300"/>
					<mx:DataGridColumn headerText="Lower Label" dataField="lowerLabelNumber" showDataTips="true" width="100"/>
					<mx:DataGridColumn headerText="Higher Label" dataField="higherLabelNumber" showDataTips="true" width="100"/>
					<mx:DataGridColumn headerText="Last Label" dataField="lastLabelNumber" showDataTips="true" width="100"/>
               <mx:DataGridColumn headerText="Teamed" dataField="teamed" showDataTips="true" width="100"/>
					<mx:DataGridColumn headerText="Starting Date" dataField="startingDate" showDataTips="true" width="200" labelFunction="Util.getDateLabel"/>
               <mx:DataGridColumn width="100" headerText="Actions"
                           itemRenderer="net.o3s.webflex.components.ActionCompetitionDataGridColumnItemRenderer" />

				</mx:columns>
			</mx:DataGrid>
            <mx:HBox width="100%" horizontalAlign="center">
               <mx:ComboBox id="selectEvent4AddCompetition" dataProvider="{eventList}" labelField="name" width="300" change="setEvent4AddCompetition(event);"/>
               <mx:Button label="Ajouter" click="addCompetition()" enabled="{selectedEvent4AddCompetition!=null}"/>
            </mx:HBox>

		</mx:Panel>
	  </mx:HBox>

		<mx:HBox width="100%" height="40%">
		<mx:Panel width="100%" height="100%" horizontalAlign="center" title="Category">
			<mx:DataGrid id="DG_categories" dataProvider="{RO_admin.getAllCategories.lastResult}" dataTipFunction="buildCategoryTip"
                      rowCount="5"  horizontalScrollPolicy="on" verticalScrollPolicy="on" resizableColumns="true" >
				<mx:columns>
					<mx:DataGridColumn headerText="Id" dataField="id" showDataTips="true" width="50"/>
               <mx:DataGridColumn headerText="Event" labelFunction="displayEvent" showDataTips="true" width="50"/>
					<mx:DataGridColumn headerText="Name" dataField="name" showDataTips="true" width="200"/>
					<mx:DataGridColumn headerText="Sex" dataField="sex" showDataTips="true" width="50"/>
					<mx:DataGridColumn headerText="Short Name" dataField="shortName" showDataTips="true" width="50"/>
					<mx:DataGridColumn headerText="Min Date" dataField="minDate" showDataTips="true" width="200" labelFunction="Util.getDateDDMMYYLabel"/>
					<mx:DataGridColumn headerText="Max Date" dataField="maxDate" showDataTips="true" width="200" labelFunction="Util.getDateDDMMYYLabel"/>

					<mx:DataGridColumn headerText="Competitions" labelFunction="displayCompetitions" showDataTips="true" width="200"/>
               <mx:DataGridColumn width="100" headerText="Actions"
                           itemRenderer="net.o3s.webflex.components.ActionCategoryDataGridColumnItemRenderer" />


				</mx:columns>
			</mx:DataGrid>
            <mx:HBox width="100%" horizontalAlign="center">
               <mx:ComboBox id="selectEvent4AddCategory" dataProvider="{eventList}" labelField="name" width="300" change="setEvent4AddCategory(event);"/>
               <mx:Button label="Ajouter" click="addCategory()"  enabled="{selectedEvent4AddCategory!=null}"/>
            </mx:HBox>

		</mx:Panel>
     </mx:HBox>

	</mx:VBox>

</mx:Canvas>
