<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:components="net.o3s.webflex.components.*"
           width="100%" height="100%"
           creationComplete="init()"
           defaultButton="{B_getRankingPdf}"
           pageTitle="O3S Ranking">

	<mx:Script>
		<![CDATA[
         import mx.collections.ArrayCollection;
         import mx.validators.StringValidator;
         import mx.validators.EmailValidator;
         import mx.validators.DateValidator;

         import mx.validators.Validator;
         import mx.events.ValidationResultEvent;
         import mx.controls.Alert;
         import mx.events.ListEvent;
         import mx.rpc.events.ResultEvent;
         import mx.utils.ObjectUtil;
         import mx.core.IUIComponent;
         import mx.events.DragEvent;
         import mx.managers.DragManager;
         import mx.utils.StringUtil;
         import flash.net.FileReference;
         import mx.utils.URLUtil;
         import mx.core.Application;
         import mx.collections.Sort;
         import mx.collections.SortField;

         import net.o3s.webflex.bean.Person;
         import net.o3s.webflex.bean.MyEvent;
         import net.o3s.webflex.bean.Competition;
         import net.o3s.webflex.bean.Category;
         import net.o3s.webflex.bean.Registered;
         import net.o3s.webflex.bean.FlexException;
         import net.o3s.webflex.components.StaticVars;
         import net.o3s.webflex.components.Util;

         import flash.utils.getDefinitionByName;
         import mx.rpc.Fault;
         import mx.rpc.events.FaultEvent;

         [Bindable]
         public var selectedScratch:Boolean = false;

         [Bindable]
         public var selectedCategories:ArrayCollection = new ArrayCollection([]);

         [Bindable]
         public var selectedClub:Boolean = false;

			[Bindable]
			public var eventList:ArrayCollection= new ArrayCollection([]);

         public var selectedEvent:MyEvent;
         public var defaultEvent:MyEvent;

         [Bindable]
         public var competitionList:ArrayCollection= new ArrayCollection([]);

         [Bindable]
         public var selectedCompetition:Competition;

         [Bindable]
         public var competitionIsEmpty:Boolean = true;

         [Bindable]
         public var categoryList:ArrayCollection= new ArrayCollection([]);

         [Bindable]
         private var arrivalsList:ArrayCollection= new ArrayCollection([]);

         [Bindable]
         public var selectedNameFilter:String="";

         [Bindable]
         public var selectedLabelFilter:String="";

         [Bindable]
         public var submitButtonGetRankingOnlineEnabled:Boolean = false;

         [Bindable]
         public var submitButtonGetRankingPDFEnabled:Boolean = false;

         [Bindable]
         public var submitButtonGenerateRankingPDFEnabled:Boolean = false;

         [Bindable]
         public var submitButtonGenerateRankingCsvEnabled:Boolean = false;

         [Bindable]
         var fileData:ByteArray = new ByteArray();

         [Bindable]
         var fileReference:FileReference = new FileReference();

         var resultOnServer:Boolean;
         var rankingType:String = "PDF";

         var serverUrl:String;

         private function changeStateCBCategories(state:Boolean):void {
            CB_allCategories.enabled = state;
            var idx:int;
            var len:int = categoryList.length;
            for (idx=0; idx<len; idx++) {
              CB_categories[idx].enabled=state;
            }
         }

         private function changeStateCBScratch(state:Boolean):void {
            CB_scratch.enabled = state;
          }

         private function changeStateCBClub(state:Boolean):void {
            CB_club.enabled = state;
         }

         public function resetRegisteredData():void {

            arrivalsList.removeAll();
            arrivalsList.filterFunction = null;
            selectedNameFilter="";
            selectedLabelFilter = "";
            if (TI_selectedNameFilter != null) {
               TI_selectedNameFilter.text="";
            }
            if (TI_selectedLabelFilter != null) {
               TI_selectedLabelFilter.text="";
            }
            setFilters();

         }

			private function init():void {

            initAdminData();
            resetRegisteredData();

            CB_competition.selectedItem = -1;
            competitionIsEmpty = true;
            competitionList.filterFunction = Util.competitionFilter;
            var sort1:Sort = new Sort();
            sort1.fields = [new SortField("id",true,false,true)];
            competitionList.sort = sort1;
            competitionList.refresh();

            categoryList.filterFunction = Util.categoryFilter;
            var sort2:Sort = new Sort();
            sort2.fields = [new SortField("id",true,false,true)];
            categoryList.sort = sort2;
            categoryList.refresh();

            submitButtonGetRankingPDFEnabled = false;
            submitButtonGetRankingOnlineEnabled = false;
            submitButtonGenerateRankingPDFEnabled = false;
            submitButtonGenerateRankingCsvEnabled = false;

            // needed in flex, class must be instancied once
            var fe:FlexException = new FlexException();

            serverUrl="http://" + URLUtil.getServerNameWithPort(Application.application.loaderInfo.url) + "/o3s-webds/";

				// Set the focus on the first field so
				// user does not have to mouse over to it.
				// Note that the user still has to click on the
				// Flex application to give it focus. This is
				// a currently limitation in Flex.
				resetFocus();

			}

         public function initAdminData():void {
            RO_admin.getAllEvents();
          }

         private function resultGetAllEvents(event:ResultEvent):void {
            eventList = event.result as ArrayCollection;
            for(var count:int = 0; count < eventList.length; count++) {
               var e:MyEvent = eventList.list.getItemAt(count, 0) as MyEvent;
               if (e.theDefault == true) {
                  defaultEvent = e;
                  selectedEvent = e;
                  CB_event.selectedItem = e;
               }
            }
            refreshAdminData(selectedEvent.id);

         }

        public function refreshAdminData(id:int):void {
            RO_admin.getAllCompetitions4Event(id);
            RO_admin.getAllCategories4Event(id);
        }

         private function resultGetCompetitions(event:ResultEvent):void {
            competitionList = event.result as ArrayCollection;
            competitionList.filterFunction = Util.competitionFilter;
            var sort:Sort = new Sort();
            sort.fields = [new SortField("id",true,false,true)];
            competitionList.sort = sort;
            competitionList.refresh();
         }

         private function resultGetCategories(event:ResultEvent):void {
            categoryList = event.result as ArrayCollection;
            categoryList.filterFunction = Util.categoryFilter;
            var sort:Sort = new Sort();
            sort.fields = [new SortField("id",true,false,true)];
            categoryList.sort = sort;
            categoryList.refresh();
         }

			// Clear the form and reset validation.
			private function clearFormHandler():void {
			   selectedScratch=false;
            CB_scratch.selected = false;
            changeStateCBScratch(true);
            selectedClub=false;
            CB_club.selected = false;
            changeStateCBClub(true);
            selectedCategories.removeAll();
            CB_allCategories.selected = false;
            changeStateCBCategories(true);
            var len:int = categoryList.length;
            var idx:int;
            for (idx=0; idx<len; idx++) {
               CB_categories[idx].selected = false;
            }
            CB_competition.selectedItem = -1;
            selectedCompetition=null;
            competitionIsEmpty = true;
            refreshSubmitButtonEnabled();
            resetRegisteredData();
				// Set the focus on the first field so
				// user does not have to mouse over to it.
				resetFocus();
			}

         private function clearAll():void {
            clearFormHandler();
         }


			// Helper method. Sets the focus on the first field so
			// user does not have to mouse over to it.
			private function resetFocus():void {
            if (focusManager != null) {
               focusManager.setFocus(CB_competition);
            }
			}


         // Set the category when change
         private function setCategories(event:Event):void {

            // rebuilt the full list
            selectedCategories.removeAll();
            var idx:int;
            var selectedNb:int = 0;
            var len:int = categoryList.length;
            for (idx=0; idx<len; idx++) {
               if (CB_categories[idx].selected) {

                  // the associated category has the same index
                  selectedCategories.addItem(categoryList.getItemAt(idx));
                  selectedNb++;
               }
            }
            // if none category
            if (selectedNb == 0) {
               changeStateCBScratch(true);
               changeStateCBClub(true);
               CB_allCategories.selected = false;
            } else if (selectedNb == len) {
            // if all categories are selected
               changeStateCBScratch(false);
               changeStateCBClub(false);
               CB_allCategories.selected = true;
            } else {
            // if some (but not all) are selected
               changeStateCBScratch(false);
               changeStateCBClub(false);
               CB_allCategories.selected = false;
            }
            refreshSubmitButtonEnabled();
         }

         private function setCompetition(event:Event):void {
            selectedCompetition=event.currentTarget.selectedItem as Competition;
            if (selectedCompetition != null && selectedCompetition.name != "Unknown") {
               competitionIsEmpty = false;
            } else {
               competitionIsEmpty = true;
            }
            refreshSubmitButtonEnabled();
         }

         private function setEvent(event:Event):void {
            selectedEvent=event.currentTarget.selectedItem as MyEvent;
            refreshAdminData(selectedEvent.id);
            clearFormHandler();

         }

         private function refreshSubmitButtonEnabled():void {

            submitButtonGetRankingOnlineEnabled = true;
            submitButtonGetRankingOnlineEnabled = submitButtonGetRankingOnlineEnabled && !competitionIsEmpty;
            submitButtonGetRankingOnlineEnabled = submitButtonGetRankingOnlineEnabled && (selectedCategories.length > 0 || selectedScratch || selectedClub);

            submitButtonGetRankingPDFEnabled = submitButtonGetRankingOnlineEnabled && StaticVars.isLogged
            submitButtonGenerateRankingPDFEnabled = submitButtonGetRankingOnlineEnabled && StaticVars.isLogged;
            submitButtonGenerateRankingCsvEnabled = submitButtonGetRankingOnlineEnabled && StaticVars.isLogged;

         }

        // Set the scratch when change
         private function modifyScratch(event:Event):void {

            if (CB_scratch.selected == true) {
               selectedScratch=true;
               changeStateCBCategories(false);
               changeStateCBClub(false);
            }
            else {
               selectedScratch=false;
               changeStateCBCategories(true);
               changeStateCBClub(true);
            }

            refreshSubmitButtonEnabled();

         }

       // Set the club when change
         private function modifyClub(event:Event):void {

            if (CB_club.selected == true) {
               selectedClub=true;
               changeStateCBCategories(false);
               changeStateCBScratch(false);
            }
            else {
               selectedClub=false;
               changeStateCBCategories(true);
               changeStateCBScratch(true);
            }

            refreshSubmitButtonEnabled();

         }

        // Set all categories when change
         private function modifyAllCategories(event:Event):void {

            if (CB_allCategories.selected == true) {
                changeStateCBScratch(false);
                changeStateCBClub(false);
                selectedCategories.removeAll();
                var idx:int;
                var len:int = categoryList.length;
                for (idx=0; idx<len; idx++) {
                  CB_categories[idx].selected=true;
                  selectedCategories.addItem(categoryList.getItemAt(idx));

                }
            }
            else {
                changeStateCBScratch(true);
                changeStateCBClub(true);
                var idx:int;
                var len:int = categoryList.length;
                for (idx=0; idx<len; idx++) {
                  CB_categories[idx].selected=false;
                }
                selectedCategories.removeAll();
            }
            refreshSubmitButtonEnabled();

         }

         private function resultIsNotEmptyScratchRanking(event:ResultEvent):void {
            var isNotEmpty:Boolean = event.result as Boolean;

            if (isNotEmpty == false) {
               Alert.show("Rapport vide!");
            } else {

               if (resultOnServer == true) {
                  if (rankingType == "PDF") {
                     RO_reporting.getScratchRankingPdfAsFileName(selectedCompetition.id);
                  } else if (rankingType == "CSV") { // CSV
                     RO_reporting.getScratchRankingCsvAsFileName(selectedCompetition.id);
                  }
               } else {

                  if (rankingType == "PDF") {

                     Alert.show("Pdf en cours de generation ...");
                     var url:URLRequest;
                     url = new URLRequest(serverUrl +
                                         "report?type=scratchRanking&competitionId=" +
                                          selectedCompetition.id);
                     navigateToURL(url,"_blank");
                  } else if (rankingType == "CSV") { // CSV
                     // do nothing
                  }
               }
            clearFormHandler();
            }
         }

         private function resultIsNotEmptyClubRanking(event:ResultEvent):void {
            var isNotEmpty:Boolean = event.result as Boolean;

            if (isNotEmpty == false) {
               Alert.show("Rapport vide!");
            } else {

               if (resultOnServer == true) {
                  if (rankingType == "PDF") {
                     RO_reporting.getClubRankingPdfAsFileName(selectedCompetition.id);
                  } else if (rankingType == "CSV") { // CSV
                     RO_reporting.getClubRankingCsvAsFileName(selectedCompetition.id);
                  }
              } else {
                  if (rankingType == "PDF") {

                     Alert.show("Pdf en cours de generation ...");
                     var url:URLRequest;
                     url = new URLRequest(serverUrl +
                                         "report?type=clubRanking&competitionId=" +
                                          selectedCompetition.id);
                     navigateToURL(url,"_blank");
                  } else if (rankingType == "CSV") { // CSV
                     // do nothing
                  }               }
            clearFormHandler();
            }
         }

         private function resultIsNotEmptyCategoryRanking(event:ResultEvent):void {
           var isNotEmpty:Boolean = event.result as Boolean;

           if (isNotEmpty == false) {
               Alert.show("Rapport vide !");
            } else {
               if (resultOnServer == true) {
                  if (rankingType == "PDF") {
                     RO_reporting.getCategoryRankingPdfAsFileName(selectedCompetition.id);
                  } else if (rankingType == "CSV") { // CSV
                     RO_reporting.getCategoryRankingCsvAsFileName(selectedCompetition.id);
                  }
               } else {

                  if (rankingType == "PDF") {

                     Alert.show("Pdf en cours de generation ...");

                     var url:URLRequest;
                     var idx:int;
                     var catPrms:String ="";
                     for (idx=0;idx<selectedCategories.length;idx++) {
                        var cat:Category = selectedCategories.getItemAt(idx) as Category;
                        if (idx == 0) {
                           catPrms = "" + cat.id;
                        } else {
                           catPrms = catPrms + "," + cat.id;
                        }
                     }
                     url = new URLRequest(serverUrl +
                                          "report?type=categoriesRanking&competitionId=" +
                                          selectedCompetition.id +
                                          "&categoriesId=" +
                                          catPrms);

                     navigateToURL(url,"_blank");
                  } else if (rankingType == "CSV") { // CSV
                     // do nothing
                  }
               }
               clearFormHandler();
            }
         }

         private function doGetRanking():void {

            // at first check that the report is not empty
            // the reporting servlet is invoked when processing the result

            if (selectedScratch == true) {
               RO_reporting.isNotEmptyScratchRanking(selectedCompetition.id);
            } else if (selectedClub == true) {
               RO_reporting.isNotEmptyClubRanking(selectedCompetition.id);
            } else {
               RO_reporting.isNotEmptyCategoryRanking(selectedCompetition.id, selectedCategories);
            }

         }

         private function getRankingPdf(event:Event):void {
            this.resultOnServer = false;
            this.rankingType = "PDF";

            doGetRanking();
         }

         private function generateRankingPdf(event:Event):void {
           this.resultOnServer = true;
            this.rankingType = "PDF";

           doGetRanking();

         }

         private function generateRankingCsv(event:Event):void {
           this.resultOnServer = true;
           this.rankingType = "CSV";

           doGetRanking();

         }

         private function resultGetRankingAsFileName(event:ResultEvent):void {
           var fileName:String = event.result as String;
           Alert.show("Le fichier <" + fileName + "> est disponible sur le serveur.");
         }

         private function getOnlineRanking(event:Event):void {
            if (selectedScratch == true) {
               RO_registering.getArrivalsFromCompetition(selectedCompetition.id);
            } else if (selectedClub == true) {
               RO_registering.getArrivalsFromCompetitionOrderByClub(selectedCompetition.id);
            } else {
               RO_registering.getArrivalsFromCompetitionOrderByCategory(selectedCompetition.id, selectedCategories);
            }
         }

         private function resultGetArrivals(ev:ResultEvent):void {
            arrivalsList = ev.result as ArrayCollection;
            setFilters();
         }

         private function setFilters():void {

            if (selectedNameFilter != "" || selectedLabelFilter != "") {
               arrivalsList.filterFunction = processFilters;
            } else {
               arrivalsList.filterFunction = null;
            }
            arrivalsList.refresh();
         }


         private function setFilterByName(event:Event):void {
            selectedNameFilter=StringUtil.trim(TI_selectedNameFilter.text);
            setFilters();
         }

         private function setFilterByLabel(event:Event):void {
            selectedLabelFilter=StringUtil.trim(TI_selectedLabelFilter.text);
            setFilters();
         }

         private function processFilters(item:Object):Boolean {

            var resultNameFilter:Boolean = true;
            var resultLabelFilter:Boolean = true;
            var registered:Registered = item as Registered;

            if (selectedNameFilter != "") {
               resultNameFilter = registered.name.toLowerCase().match(selectedNameFilter.toLowerCase());
            }

            if (selectedLabelFilter != "") {
               resultLabelFilter = registered.label.value.match(selectedLabelFilter);
            }

            return (resultNameFilter && resultLabelFilter);
         }


         private function onFault(ev:Event):void {
            Alert.show( ObjectUtil.toString(ev) );
         }

		]]>
	</mx:Script>

   <mx:RemoteObject id="RO_admin" destination="admin" showBusyCursor="true" fault="onFault(event)">
      <mx:method name="getAllEvents" result="resultGetAllEvents(event)"/>
      <mx:method name="getAllCompetitions4Event" result="resultGetCompetitions(event)"/>
      <mx:method name="getAllCategories4Event" result="resultGetCategories(event)"/>
   </mx:RemoteObject>

   <mx:RemoteObject id="RO_reporting" destination="reporting" showBusyCursor="true" fault="onFault(event)">
      <mx:method name="isNotEmptyScratchRanking" result="resultIsNotEmptyScratchRanking(event)"/>
      <mx:method name="isNotEmptyCategoryRanking" result="resultIsNotEmptyCategoryRanking(event)"/>
      <mx:method name="isNotEmptyClubRanking" result="resultIsNotEmptyClubRanking(event)"/>
      <mx:method name="getCategoryRankingPdfAsFileName" result="resultGetRankingAsFileName(event)"/>
      <mx:method name="getCategoryRankingCsvAsFileName" result="resultGetRankingAsFileName(event)"/>
      <mx:method name="getClubRankingPdfAsFileName" result="resultGetRankingAsFileName(event)"/>
      <mx:method name="getClubRankingCsvAsFileName" result="resultGetRankingAsFileName(event)"/>
      <mx:method name="getScratchRankingPdfAsFileName" result="resultGetRankingAsFileName(event)"/>
      <mx:method name="getScratchRankingCsvAsFileName" result="resultGetRankingAsFileName(event)"/>
   </mx:RemoteObject>

   <mx:RemoteObject id="RO_registering" destination="registering" showBusyCursor="true" fault="onFault(event)">
      <mx:method name="getArrivalsFromCompetition" result="resultGetArrivals(event)"/>
      <mx:method name="getArrivalsFromCompetitionOrderByCategory" result="resultGetArrivals(event)"/>
      <mx:method name="getArrivalsFromCompetitionOrderByClub" result="resultGetArrivals(event)"/>
   </mx:RemoteObject>

	<mx:VBox width="95%" height="60%">

      <components:EventPanel id="MyEventPanel"  width="100%"/>
		<mx:HBox width="100%" height="30%">
			<mx:Panel title="Selection du classement" width="100%" height="100%" horizontalAlign="center">
           <mx:HBox width="100%" height="20%" horizontalAlign="center">
             <mx:Label id="L_event" text="Selectionner un evenement: " textAlign="right"/>
             <mx:ComboBox id="CB_event" dataProvider="{eventList}" labelField="name" width="200" change="setEvent(event)" />
             <mx:Label id="L_competition" text="Selectionner une competition: " textAlign="right"/>
		 		 <mx:ComboBox id="CB_competition" dataProvider="{competitionList}" labelField="name" width="200" change="setCompetition(event)" />
             <mx:CheckBox id="CB_scratch" label="Classement scratch" selected="false" click="modifyScratch(event)"/>
             <mx:CheckBox id="CB_allCategories" label="Classement par categorie (toutes ou selection)" selected="false" click="modifyAllCategories(event)"/>
             <mx:CheckBox id="CB_club" label="Classement par club" selected="false" click="modifyClub(event)"/>
           </mx:HBox>
           <mx:Tile direction="horizontal" width="100%" borderStyle="inset"
                     horizontalGap="5" verticalGap="5"
                     paddingLeft="3" paddingTop="3" paddingBottom="3" paddingRight="3" label="Selectionner les categories">
             <mx:Repeater id="R_checkBoxRepeater" dataProvider="{categoryList}">
                <mx:CheckBox id="CB_categories"
                           label="{R_checkBoxRepeater.currentItem.name}"
                           data="{R_checkBoxRepeater.currentItem.data}"
                           change="setCategories(event);" />

              </mx:Repeater>
            </mx:Tile>
           <mx:HBox width="100%" height="20%" horizontalAlign="center">
             <mx:ControlBar horizontalAlign="center">
                 <mx:Button
                     id="B_getRankingOnline"
                     label="Récupérer les résultats en ligne"
                     click="getOnlineRanking(event);"
                     enabled="{submitButtonGetRankingPDFEnabled}"
                     />

                  <mx:Button
                     id="B_getRankingPdf"
                     label="Recuperer le pdf"
                     click="getRankingPdf(event);"
                     enabled="{submitButtonGetRankingPDFEnabled}"
                     />
                  <mx:Button
                     id="B_generateRankingPDF"
                     label="Generer le pdf sur le serveur"
                     click="generateRankingPdf(event);"
                     enabled="{submitButtonGenerateRankingPDFEnabled}"
                     />

                  <mx:Button
                     id="B_generateRankingCSV"
                     label="Generer le csv sur le serveur"
                     click="generateRankingCsv(event);"
                     enabled="{submitButtonGenerateRankingCsvEnabled}"
                     />

                  <mx:Button
                     id="B_clear"
                     label="Effacer"
                     click="clearFormHandler();"
                     />
             </mx:ControlBar>
           </mx:HBox>
 			</mx:Panel>
		</mx:HBox>

		<mx:HBox width="100%" height="70%">
			<mx:Panel title="Resultat(s)" width="100%" height="100%" horizontalAlign="center">
            <mx:HBox width="100%" height="100%" horizontalAlign="center">
                  <mx:FormItem label="Filtre par nom" >
                     <mx:TextInput id="TI_selectedNameFilter" width="150" change="setFilterByName(event);"/>
                  </mx:FormItem>
                  <mx:FormItem label="Filtre par dossard" >
                     <mx:TextInput id="TI_selectedLabelFilter" width="150" change="setFilterByLabel(event);"/>
                  </mx:FormItem>
            </mx:HBox>

            <mx:DataGrid id="DG_arrivals" dataProvider="{arrivalsList}"
                      rowCount="20"  horizontalScrollPolicy="on" verticalScrollPolicy="on" resizableColumns="true" >
               <mx:columns>
                  <mx:DataGridColumn headerText="Rang" dataField="rank" width="50"/>
                  <mx:DataGridColumn headerText="Name" dataField="name" width="150"/>
                  <mx:DataGridColumn headerText="Competition" labelFunction="Util.displayCompetition" showDataTips="true" width="115"/>
                  <mx:DataGridColumn headerText="Categorie" labelFunction="Util.displayCategory" showDataTips="true" width="115"/>
                  <mx:DataGridColumn headerText="Club" dataField="club" width="150"/>
                  <mx:DataGridColumn headerText="Dossard" labelFunction="Util.displayLabel" showDataTips="true" width="100"/>
                  <mx:DataGridColumn headerText="Temps" dataField="elapsedTime" showDataTips="true" width="150" labelFunction="Util.getElapsedTimeLabel"/>
               </mx:columns>
            </mx:DataGrid>

			</mx:Panel>
		</mx:HBox>

	</mx:VBox>
</mx:Canvas>
