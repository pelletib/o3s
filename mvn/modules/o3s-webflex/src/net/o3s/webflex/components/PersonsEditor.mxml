<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:components="net.o3s.webflex.components.*"
		   creationComplete="init(event)"
		   width="100%">
<mx:Script>
	<![CDATA[

		import mx.collections.ArrayCollection;

		import mx.validators.Validator;
		import mx.events.ValidationResultEvent;
		import mx.controls.Alert;
		import mx.events.ListEvent;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		import mx.core.IUIComponent;
		import mx.utils.StringUtil;
		import mx.events.DragEvent;
		import mx.managers.DragManager;

		import net.o3s.webflex.bean.Person;

		import mx.rpc.Fault;
		import mx.rpc.events.FaultEvent;

		[Bindable]
		public var formIsValid:Boolean = false;

		[Bindable]
		public var formIsEmpty:Boolean = true;

		// Holds a reference to the currently focussed
		// control on the form.
		private var focussedFormControl:DisplayObject;

		[Bindable]
		public var personList:ArrayCollection = new ArrayCollection([]);

		[Bindable]
		public var personIdToUpdate:int = -1;

		[Bindable]
		public var addIsPossible:Boolean = true;

		[Bindable]
		public var addEnabled:Boolean = false;

		[Bindable]
		public var updateIsPossible:Boolean = false;

		[Bindable]
		public var updateEnabled:Boolean = false;

      [Bindable]
      public var rfidEditable:Boolean;

      private function init(event:Event):void {
      }

		private function resultCreatePerson(event:ResultEvent):void {
			var person:Person = event.result as Person;
			personList.addItem(person);
			clearFormHandler();
			this.parentDocument.notifyChangeFromChildComponent();
		}

		private function resultUpdatePerson(event:ResultEvent):void {
			var person:Person = event.result as Person;

			var idx:int = -1;

			for(var count:int = 0; count < personList.length; count++) {
				var p:Person = personList.getItemAt(count, 0) as Person;
				if (p.id == person.id) {
					idx = count;
					break;
				}
			}

			personList.setItemAt(person,idx);
			clearFormHandler();
			this.parentDocument.notifyChangeFromChildComponent();
		}

		private function resultRemovePerson(event:ResultEvent):void {
			var id:int = event.result as int;
			var idx:int = -1;

			for(var count:int = 0; count < personList.length; count++) {
				var p:Person = personList.getItemAt(count, 0) as Person;
				if (p.id == id) {
					idx = count;
					break;
				}
			}

			personList.removeItemAt(idx);
			clearFormHandler();
		}

		private function addPerson(event:Event):void {
			var person:Person = MyPersonForm.person;

			if (person.firstname == "" || person.lastname == "") {
				Alert.show("Personne non definie !");
			}
			else {
				var found:Boolean = false;
				for(var count:int = 0; count < personList.length; count++) {
					var p:Person = personList.getItemAt(count, 0) as Person;
					if (p.firstname == person.firstname && p.lastname == person.lastname) {
						found = true;
					}
				}

				if (found ) {
					Alert.show("Personne deja definie dans ce formulaire !");
				}
				else {
					RO_registering.createPerson(person, true);
				}
			}
		}

		private function updatePerson(event:Event):void {
			var person:Person = MyPersonForm.person;
			person.id = personIdToUpdate;

			if (person.firstname == "" || person.lastname == "") {
				Alert.show("Personne non definie !");
			}
			else {
				var found:int = 0;
				for(var count:int = 0; count < personList.length; count++) {
					var p:Person = personList.getItemAt(count, 0) as Person;
					if (p.firstname == person.firstname && p.lastname == person.lastname) {
						found++;
					}
				}

				if (found>1 ) {
					Alert.show("Personne definie plusieurs fois !");
				} else {
					RO_registering.updatePerson(person);
				}
			}

		}

		private function clearFormHandler():void {

			MyPersonForm.clearFormHandler();
         L_PersonForm.text="";
		}


		// Clear the form and reset validation.
		private function clearEditorHandler():void {
			// Clear all input fields.
			personIdToUpdate = -1;

			// Flag that the form is now clear
			addEnabled = false;
			addIsPossible = true;
			updateIsPossible = false;
			updateEnabled = false;

			clearFormHandler();

			// Set the focus on the first field so
			// user does not have to mouse over to it.
			MyPersonForm.resetFocus();
		}

		public function clearAll():void {
			clearEditorHandler();
			personList.removeAll();
		}


		private function rollOverPerson(event:ListEvent):void {
			//personIdToUpdate = this.DG_persons.dataProvider[event.rowIndex].id;
			putPersonInForm(this.DG_persons.dataProvider[event.rowIndex] as Person);
			updateIsPossible = true;
			addIsPossible = false;
		}

		private function putPersonInForm(person:Person):void {
			personIdToUpdate = person.id;
			MyPersonForm.person = person;
		}

		public function editExistingPerson(person:Person):void {

         L_PersonForm.text="Personne existante dans la base ! ";

         // check if the person is already registered
         RO_registering.isAlreadyRegisteredForDefaultEvent(person.id);

          // predict feature is only available if logged
         if (StaticVars.isLogged == false) {
            return;
         }

         // si admin, put values in the form
			putPersonInForm(person);

		}

		private function resultIsAlreadyRegisteredForDefaultEvent(event:ResultEvent):void {
			var isAlreadyRegistered:Boolean = event.result as Boolean;

         if (isAlreadyRegistered == true) {
            L_PersonForm.text="Personne déjà inscrite sur une course ! ";
            addIsPossible = false;
         } else {
            addIsPossible = true;
         }
         MyPersonForm.validateForm(event);

		}

      public function editNotExistingPerson(event:ResultEvent):void {
            L_PersonForm.text="";
            addIsPossible = true;
            MyPersonForm.validateForm(event);
      }

		private function buildPersonTip(item:Object):String {
			var myString:String = "Double click pour editer";
			/*
			if(item != null) {
				myString = myString + item.id + ",";
				myString = myString + item.firstname + ",";
				myString = myString + item.lastname + ",";
				myString = myString + item.sex + ",";
				myString = myString + item.birthday + ",";
				myString = myString + item.email + ",";
				myString = myString + item.club + ",";
            myString = myString + item.license + ",";
				myString = myString + item.computedCategory + "\n";
			} */
			return myString;
		}

		private function trash_dragEnter(evt:DragEvent):void {
			var obj:IUIComponent = IUIComponent(evt.currentTarget);
			DragManager.acceptDragDrop(obj);
		}

		private function trash_dragDrop(evt:DragEvent):void {
			var person:Person = DG_persons.selectedItem as Person;
         // disable the effective removing (not sure what to do in this case)

			//RO_registering.removePerson(person.id);

         // just remove it from the list
         var id:int = person.id;
         var idx:int = -1;

         for(var count:int = 0; count < personList.length; count++) {
            var p:Person = personList.getItemAt(count, 0) as Person;
            if (p.id == id) {
               idx = count;
               break;
            }
         }

         personList.removeItemAt(idx);
         clearFormHandler();

		}

		// form component is valid ?
		public function resultValidatePersonForm(isValid:Boolean):void {

			addEnabled = isValid && addIsPossible ;
			updateEnabled = isValid && updateIsPossible ;
		}

		public function getDateDDMMYYYLabel(item:Object,column:DataGridColumn):String {
			return formatDateDDMMYYY.format(item[column.dataField]);
		}

		public function set4Update(pList:ArrayCollection):void {
			personList = pList;
         // by default in the update mode, form is valid
         formIsValid = true;
		}
	]]>
</mx:Script>

	<mx:RemoteObject id="RO_registering" destination="registering" showBusyCursor="true" fault="Util.onFault(event)">
		<mx:method name="createPerson" result="resultCreatePerson(event)" fault="Util.handleException(event)"/>
		<mx:method name="updatePerson" result="resultUpdatePerson(event)" fault="Util.handleException(event)"/>
		<mx:method name="removePerson" result="resultRemovePerson(event)" fault="Util.handleException(event)"/>
		<mx:method name="isAlreadyRegisteredForDefaultEvent" result="resultIsAlreadyRegisteredForDefaultEvent(event)" fault="Util.handleException(event)"/>
	</mx:RemoteObject>

	<mx:DateFormatter formatString="DD/MM/YYYY" id="formatDateDDMMYYY"/>

	<mx:Panel title="Personne(s)" width="100%" height="100%" defaultButton="{B_addPerson}">
		<mx:HBox width="100%" height="90%">
			<mx:VBox width="30%" height="100%">
				<components:PersonForm id="MyPersonForm" rfidEditable="{rfidEditable}"/>
            <mx:Label id="L_PersonForm" text="" color="red" textAlign="right" fontWeight="bold"/>
			</mx:VBox>
			<mx:VBox width="70%" height="100%">
				<mx:DataGrid id="DG_persons" dataProvider="{this.personList}" width="100%"  height="90%" editable="true"
							 dropEnabled="true" dragEnabled="true" dataTipFunction="buildPersonTip"
							 doubleClickEnabled="true" itemDoubleClick="rollOverPerson(event);" rowCount="5" verticalScrollPolicy="on">
					<mx:columns>
						<mx:DataGridColumn dataField="firstname" headerText="Prenom" editable="false" showDataTips="true"/>
						<mx:DataGridColumn dataField="lastname" headerText="Nom" editable="false" sortable="true" showDataTips="true"/>
						<mx:DataGridColumn dataField="sex" headerText="Sexe" editable="false" minWidth="5" showDataTips="true"/>
						<mx:DataGridColumn dataField="birthday" headerText="Date Naissance" editable="false" minWidth="25" showDataTips="true" labelFunction="getDateDDMMYYYLabel"/>
						<mx:DataGridColumn dataField="rfid" headerText="Rfid" visible="{StaticVars.isLogged}" editable="false" minWidth="10" showDataTips="true"/>
						<mx:DataGridColumn dataField="email" headerText="Email" editable="false" minWidth="10" showDataTips="true"/>
                  <mx:DataGridColumn dataField="club" headerText="Club" editable="false" minWidth="10" showDataTips="true"/>
						<mx:DataGridColumn dataField="license" headerText="License" editable="false" minWidth="10" showDataTips="true"/>
						<mx:DataGridColumn dataField="computedCategory" headerText="Categorie" editable="false" minWidth="10" showDataTips="true"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:Spacer height="5" />
				<mx:ControlBar horizontalAlign="center" width="100%" height="10%">
					<mx:Image id="I_trash" width="50" height="50"
							  source="@Embed('../images/trash.png')"
							  dragDrop="trash_dragDrop(event);"
							  dragEnter="trash_dragEnter(event);" />
				</mx:ControlBar>

			</mx:VBox>
		</mx:HBox>
		<mx:HBox width="100%" height="10%">
			<mx:ControlBar horizontalAlign="center">
				<mx:Button
					id="B_addPerson"
					label="Ajouter"
					enabled="{addEnabled}"
					click="addPerson(event);"
					/>
				<mx:Button
					id="B_updatePerson"
					label="Mettre a jour"
					enabled="{updateEnabled}"
					click="updatePerson(event);"
					/>
				<mx:Button
					id="B_clearPerson"
					label="Effacer"
					click="clearFormHandler();"
					/>
			</mx:ControlBar>
		</mx:HBox>
	</mx:Panel>
</mx:Canvas>
