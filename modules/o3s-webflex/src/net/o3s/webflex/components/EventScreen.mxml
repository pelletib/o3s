<?xml version="1.0" encoding="utf-8"?>
<!--
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- O3S: Open Source Sport Software
- Copyright (C) 2010 Benoit Pelletier
- Contact: btpelletier@gmail.com
-
- This library is free software; you can redistribute it and/or
- modify it under the terms of the GNU Lesser General Public
- License as published by the Free Software Foundation; either
- version 2.1 of the License, or any later version.
-
- This library is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- Lesser General Public License for more details.
-
- You should have received a copy of the GNU Lesser General Public
- License along with this library; if not, write to the Free Software
- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
- USA
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- $Id: pelletib $
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
 layout="absolute" width="348" height="218"
 title="Formulaire evenement"
 creationComplete="init()">
  <mx:Metadata>
    [Event(name="SaveEvent")]
  </mx:Metadata>
  <mx:Script>
   <![CDATA[
      import mx.managers.PopUpManager;
      import mx.validators.StringValidator;
      import net.o3s.webflex.components.AdvancedStringValidator;
      import mx.validators.DateValidator;
      import mx.validators.Validator;
      import mx.events.ValidationResultEvent;
      import mx.collections.ArrayCollection;

      [Bindable]
      public var formIsValid:Boolean = false;

      private var focussedFormControl:DisplayObject;
      private var eventNameValidator:StringValidator;
      private var eventDateValidator:DateValidator;

      private function init():void {

         eventNameValidator = new StringValidator();
         eventNameValidator.source = eventName;
         eventNameValidator.property = "text";
         eventNameValidator.minLength = 2;
         eventNameValidator.maxLength = 30;
         eventNameValidator.required=true;

         eventDateValidator = new DateValidator();
         eventDateValidator.source = eventDate;
         eventDateValidator.property = "text";
         eventDateValidator.allowedFormatChars="/";
         eventDateValidator.inputFormat="DD/MM/YYYY";
         eventDateValidator.required=true;

      }

     private function close():void
     {
       PopUpManager.removePopUp(this);
     }

     private function save():void
     {
       this.dispatchEvent(new Event("SaveEvent"));
     }

      // Validate the form
      public function validateForm(event:Event):void  {
          focussedFormControl = event.target as DisplayObject;

         // Mark the form as valid to start with
         formIsValid = true;


         // Run each validator in turn, using the isValid()
         // helper method and update the value of formIsValid
         // accordingly.
         validateEvent(eventNameValidator);
         validateEvent(eventDateValidator);
      }


      // Helper method. Performs validation on a passed Validator instance.
      // Validator is the base class of all Flex validation classes so
      // you can pass any validation class to this method.
      private function validateEvent(validator:Validator):Boolean {
         // Get a reference to the component that is the
         // source of the validator.
         var validatorSource:DisplayObject = validator.source as DisplayObject;

         // Suppress events if the current control being validated is not
         // the currently focussed control on the form. This stops the user
         // from receiving visual validation cues on other form controls.
         var suppressEvents:Boolean = (validatorSource != focussedFormControl);

         // Carry out validation. Returns a ValidationResultEvent.
         // Passing null for the first parameter makes the validator
         // use the property defined in the property tag of the
         // <mx:Validator> tag.
         var event:ValidationResultEvent = validator.validate(null, suppressEvents);

         // Check if validation passed and return a boolean value accordingly.
         var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);

         // Update the formIsValid flag
         formIsValid = formIsValid && currentControlIsValid;

         return currentControlIsValid;
      }

   ]]>
 </mx:Script>

 <mx:VBox>

   <mx:Form>
      <mx:FormItem label="Nom" >
         <mx:TextInput id="eventName" width="150" restrict="A-Za-z0-9\- "  change="validateForm(event);"/>
      </mx:FormItem>

      <mx:FormItem label="Date de l'evenement" >
         <mx:DateField id="eventDate"
                    yearNavigationEnabled="true"
                    editable="true"
                    formatString="DD/MM/YYYY"
                    textAlign="center"
                    fontSize="9"
                    selectableRange="{{rangeStart : new Date(1900,0,1), rangeEnd : new Date(2020,0,1)}}"
                    change="validateForm(event);"/>
      </mx:FormItem>
   </mx:Form>
   <mx:ControlBar horizontalAlign="center">
     <mx:HBox width="100%" horizontalAlign="center">
       <mx:Button label="Annuler" click="close()" />
       <mx:Button label="Sauver" click="save()" enabled="{formIsValid}" />
     </mx:HBox>
   </mx:ControlBar>

 </mx:VBox>
</mx:TitleWindow>
